#!/usr/bin/python


# MUST be 2,4,8,16,32,64,128, etc...
folds = [2,4,8,16,32,64,128]


#=========#

print "/**\n * This file is automaticaly generated!\n * Do not edit by hand!";
print " * Code generated by make_harmfold_code.py\n */";
print "void pch_seek_harmfold_pow_two(float* amp, int ndat, float** h, int nfolds){"

odd=1
kn=0
while odd < folds[-1]:
	print "int k%d;"%(kn)
	odd+=2
	kn+=1
print "int n,nloop;"
print "float* prevfold;"



f=0
for fval in folds:
	i = 0

	print "// Code for harmonic fold %d"%(fval)
	odd=1
	kn=0
	while odd < fval:
		print "k%d = %d;"%(kn,(odd*fval+fval)/(2*fval))
		odd+=2
		kn+=1

	if f==0:
		print "prevfold=amp;";
	else:
		print "prevfold=h[%d];"%(f-1);

	print "nloop=ndat-%d;"%(fval-1);
	print "for (n=%d ; n < nloop ; n+=%d) {"%(fval/2,fval) 
	while i < fval:
		if i == 0:
			print "\th[%d][n]=prevfold[n]"%f,
		else:
			print "\th[%d][n+%d]=prevfold[n+%d]"%(f,i,i),
		odd=1
		kn=0
		while odd < fval:
			added=int((odd*i)/fval)
			if added==0:
				print "+ amp[k%d]"%(kn),
			else:
				print "+ amp[k%d+%d]"%(kn,added),
			odd+=2
			kn+=1
		i+=1
		print ";"
	odd=1
	kn=0
	while odd < fval:
		print "\tk%d+=%d;"%(kn,odd)
		odd+=2
		kn+=1

	print "}\n"
	f+=1

	print "if (nfolds == %d)return;\n\n"%f
print "}\n"
